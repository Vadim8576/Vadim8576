{"version":3,"sources":["common/mySetDate.js","components/mainPage/List.js","../node_modules/react-bootstrap/esm/Badge.js","components/mainPage/moviesInfo/MovieInfoHeader.js","components/mainPage/moviesInfo/MovieInfoContainer.js"],"names":["mySetDate","d","locate","options","year","month","day","timezone","Date","toLocaleString","List","data","type","id","count","len","length","config","context","title","text","name","job","img","property","no_photo","path","target","more_link","view","className","map","item","index","key","to","src","alt","release_date","Badge","React","forwardRef","_ref","ref","bsPrefix","variant","pill","_ref$as","as","Component","props","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","defaultProps","MovieDetailsHeader","movie_info","poster_path","vote_average","videos","results","i","href","original_title","tagline","genres","production_countries","production_companies","logo_path","budget","revenue","runtime","status","homepage","overview","MovieInfoContainer","compose","connect","state","movies","credits","movie_info_isFetching","credits_isFetching","getDetails","getCredits","withRouter","useEffect","movie_id","match","params","MovieInfoHeader","Spinner","animation","cast","crew"],"mappings":"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","file":"static/js/4.426956e8.chunk.js","sourcesContent":["const mySetDate = (d, locate='ru') => {\r\n    const options = {\r\n        year: 'numeric',\r\n        month: 'numeric',\r\n        day: 'numeric',\r\n        // hour: 'numeric',\r\n        // minute: 'numeric',\r\n        // second: 'numeric',\r\n        timezone: 'UTC'\r\n    };\r\n    return d==='' ? null : new Date(d).toLocaleString(locate, options);\r\n}\r\n\r\n\r\nexport default mySetDate;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './../../styles/list.css';\r\nimport mySetDate from '../../common/mySetDate';\r\n\r\n\r\nconst List = ({ data, type, id }) => {\r\n\r\n\r\n    let count = 6;\r\n    const len = data ? data.length : 'нет данных';\r\n    let config = {};\r\n\r\n    if (type.context === 'movie cast') {\r\n        config = {\r\n            title: 'Актеры',\r\n            text: {\r\n                name: 'name',\r\n                job: 'character'\r\n            },\r\n            img: {\r\n                property: 'profile_path',\r\n                no_photo: '/img/no_photo.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w138_and_h175_face'\r\n            },\r\n            target: '/people/',\r\n            more_link: '/casts/',\r\n            type: type.view // вид списка (горизонтальный, вертикальный...)\r\n        }\r\n    }\r\n\r\n    if (type.context === 'movie crew') {\r\n        config = {\r\n            title: 'Съемочная группа',\r\n            text: {\r\n                name: 'name',\r\n                job: 'job'\r\n            },\r\n            img: {\r\n                property: 'profile_path',\r\n                no_photo: '/img/no_photo.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w138_and_h175_face'\r\n            },\r\n            target: '/people/',\r\n            more_link: '/crew/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n    if (type.context === 'people cast') {\r\n        config = {\r\n            title: 'Фильмы',\r\n            text: {\r\n                name: 'title',\r\n                job: 'character'\r\n            },\r\n            img: {\r\n                property: 'poster_path',\r\n                no_photo: '/img/no_poster.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w500'\r\n            },\r\n            target: '/movie-info/',\r\n            more_link: '/people-filmography/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    if (type.context === 'people crew') {\r\n        config = {\r\n            title: 'Принимал(а) участие',\r\n            text: {\r\n                name: 'title',\r\n                job: 'job'\r\n            },\r\n            img: {\r\n                property: 'poster_path',\r\n                no_photo: '/img/no_poster.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w500'\r\n            },\r\n            target: '/movie-info/',\r\n            more_link: '/people-crew/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>  {len > 0 &&\r\n            <>\r\n            <div className='credits_tittle bg-primary'>\r\n                <span className='text-white'>{config.title}:</span>\r\n            </div>\r\n            <div className={config.type + '_list_wrap border'}>\r\n                {data && data.map((item, index) => {\r\n                    if (!id) count = len;\r\n                    if (index < count) {\r\n                        return (\r\n\r\n                            <div key={index} className={config.type + '_list' + ' border'}>\r\n                                <div className={config.type + '_photo'}>\r\n                                    <NavLink to={config.target + item.id} className='link'>\r\n                                        <img className='border' src=\r\n                                            {item[config.img.property] ? config.img.path + item[config.img.property] : config.img.no_photo}\r\n                                            alt='профайл' />\r\n                                    </NavLink>\r\n                                </div>\r\n                                <div className='list_text'>\r\n                                    <div>\r\n                                        <NavLink to={config.target + item.id} className='link'>\r\n                                            {item[config.text.name] && item[config.text.name]}\r\n                                        </NavLink>\r\n                                    </div>\r\n                                    <div><i>{item[config.text.job] && item[config.text.job]}</i></div>\r\n                                    {type.context === 'people cast' || type.context === 'people crew'\r\n                                        ? <div><i>{mySetDate(item.release_date)}</i></div>\r\n                                        : ''\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    } else { return null }\r\n\r\n                })}\r\n                {(data && data.length > count) // Если id передан, покажем кнопку ЕЩЕ, если нет - это полный список\r\n                    ? id &&\r\n                    <div className={config.type + '_list border'}>\r\n                        <NavLink to={config.more_link + id} className='link'>\r\n                            Еще...\r\n                    </NavLink>\r\n                    </div>\r\n                    : ''\r\n                }\r\n                {data && data.length === 0 && 'Нет данных'}\r\n\r\n            </div>\r\n            </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default List;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React from 'react';\r\nimport { Badge } from 'react-bootstrap';\r\nimport mySetDate from '../../../common/mySetDate';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport './../../../styles/info_pages.css';\r\n\r\n\r\nconst MovieDetailsHeader = ({ movie_info }) => {\r\n\r\n    const release_date = movie_info.release_date ? mySetDate(movie_info.release_date) : 'нет данных';\r\n\r\n    return (\r\n\r\n        <div className='details_header border'>\r\n            <div className='details_header_left'>\r\n                <div className='poster'>\r\n                    <img src={movie_info.poster_path ? `https://image.tmdb.org/t/p/w220_and_h330_face${movie_info.poster_path}` : '/img/no_poster.jpg'} alt='постер' />\r\n                </div>\r\n\r\n                <div className='details_header_rate'>\r\n                    <p>Пользовательский рейтинг: <Badge variant=\"info\">{movie_info.vote_average ? movie_info.vote_average : '0'}</Badge></p>\r\n\r\n                    {movie_info.videos.results.length > 0 &&\r\n                        <><hr /><p>Трейлеры:</p></>}\r\n                    {movie_info.videos.results.map(i =>\r\n                        <div key={i.id}>\r\n                            <a href={`https://www.themoviedb.org/video/play?key=${i.key}`} target='_blank'>\r\n                                {i.name}\r\n                            </a><br />\r\n                        </div>\r\n                    )\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className='text'>\r\n                <h4>{movie_info.title ? movie_info.title : 'Нет названия'}</h4>\r\n                <hr />\r\n                <p>Оригинальное название: {movie_info.original_title ? movie_info.original_title : 'нет данных'}</p>\r\n                <p>Слоган: {movie_info.tagline ? movie_info.tagline : 'нет данных'}</p>\r\n                <p>Жанр: {movie_info.genres ? movie_info.genres.map(i => i.name + ', ') : 'нет данных'}</p>\r\n                <p>Дата релиза: {release_date} &nbsp;\r\n                                <NavLink to={`/movie-releases/${movie_info.id}`} className='nav-link'>подробнее</NavLink>\r\n                </p>\r\n                <p>Страна производства: {movie_info.production_countries ? movie_info.production_countries.map(i => i.name + ', ') : 'нет данных'}</p>\r\n                <p>Студия:\r\n                                {movie_info.production_companies\r\n                        ? movie_info.production_companies.map(i =>\r\n                            <span key={i.id}><br />\r\n                                {i.logo_path\r\n                                    && <img className='company_logo' src={`https://image.tmdb.org/t/p/original${i.logo_path}`} alt='logo' />}\r\n                                        &nbsp;{i.name}\r\n\r\n                            </span>\r\n\r\n                        )\r\n                        : 'нет данных'}\r\n                </p>\r\n                <p>Бюджет: {movie_info.budget ? movie_info.budget + '$' : 'нет данных'}</p>\r\n                <p>Сборы: {movie_info.revenue ? movie_info.revenue + '$' : 'нет данных'}</p>\r\n                <p>Продолжительность: {movie_info.runtime ? movie_info.runtime + ' мин' : 'нет данных'}</p>\r\n                <p>Статус: {movie_info.status ? movie_info.status : 'нет данных'}</p>\r\n\r\n                {movie_info.homepage\r\n                    && <p><a href={movie_info.homepage} target='_blank' className='nav-link'>Домашняя страница</a></p>\r\n                }\r\n\r\n                {/* <p>Домашняя страница: {movie_info.homepage ? movie_info.homepage : 'нет данных'}</p> */}\r\n                {movie_info.overview\r\n                    ? <>\r\n                        <details>\r\n                            <summary>Краткое описание:</summary>\r\n                            <p>{movie_info.overview}</p>\r\n                        </details>\r\n                    </>\r\n                    : 'Описание отсутствует'}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MovieDetailsHeader;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getDetails, getCredits } from '../../../redux/movie_reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport MovieInfoHeader from './MovieInfoHeader';\r\nimport List from './../List';\r\n\r\n\r\n\r\n\r\nconst MovieInfo = ({ getDetails, getCredits, movie_info, movie_info_isFetching, credits, credits_isFetching, ...props }) => {\r\n    // a = {context: 'movie cast', view: 'horizontal'}\r\n\r\n    useEffect(() => {\r\n        const movie_id = props.match.params.movie_id;\r\n        getDetails(movie_id);\r\n        getCredits(movie_id);\r\n    }, [props.match.params.movie_id])\r\n\r\n    return (\r\n\r\n        <>\r\n            {movie_info_isFetching\r\n                ? <MovieInfoHeader\r\n                    movie_info={movie_info}\r\n                    movie_info_isFetching={movie_info_isFetching}\r\n                />\r\n                : <Spinner animation='border' />\r\n            }\r\n\r\n\r\n            {credits_isFetching\r\n                ? <>\r\n                    <List id={props.match.params.movie_id} data={credits.cast} type={{context: 'movie cast', view: 'horizontal'}} />\r\n                    <List id={props.match.params.movie_id} data={credits.crew} type={{context: 'movie crew', view: 'horizontal'}} />\r\n                </>\r\n                : <Spinner animation='border' />\r\n            }\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => (\r\n    {\r\n        movie_info: state.movies.movie_info,\r\n        credits: state.movies.credits,\r\n        movie_info_isFetching: state.movies.movie_info_isFetching,\r\n        credits_isFetching: state.movies.credits_isFetching\r\n    }\r\n)\r\n\r\n\r\nconst MovieInfoContainer = compose(connect(mapStateToProps,\r\n    { getDetails, getCredits }), withRouter)(MovieInfo);\r\n\r\nexport default MovieInfoContainer;"],"sourceRoot":""}