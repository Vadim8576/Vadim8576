{"version":3,"sources":["common/mySetDate.js","components/mainPage/List.js","components/mainPage/moviesInfo/MovieCasts.js"],"names":["mySetDate","d","locate","options","year","month","day","timezone","Date","toLocaleString","List","data","type","id","count","len","length","config","context","title","text","name","job","img","property","no_photo","path","target","more_link","view","className","map","item","index","key","to","src","alt","release_date","MovieCasts","getCredits","getDetails","movie_info","credits","props","console","log","useEffect","movie_id","match","params","poster_path","cast","compose","connect","state","movies","withRouter"],"mappings":"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","file":"static/js/5.2a8fbb45.chunk.js","sourcesContent":["const mySetDate = (d, locate='ru') => {\r\n    const options = {\r\n        year: 'numeric',\r\n        month: 'numeric',\r\n        day: 'numeric',\r\n        // hour: 'numeric',\r\n        // minute: 'numeric',\r\n        // second: 'numeric',\r\n        timezone: 'UTC'\r\n    };\r\n    return d==='' ? null : new Date(d).toLocaleString(locate, options);\r\n}\r\n\r\n\r\nexport default mySetDate;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './../../styles/list.css';\r\nimport mySetDate from '../../common/mySetDate';\r\n\r\n\r\nconst List = ({ data, type, id }) => {\r\n\r\n\r\n    let count = 6;\r\n    const len = data ? data.length : 'нет данных';\r\n    let config = {};\r\n\r\n    if (type.context === 'movie cast') {\r\n        config = {\r\n            title: 'Актеры',\r\n            text: {\r\n                name: 'name',\r\n                job: 'character'\r\n            },\r\n            img: {\r\n                property: 'profile_path',\r\n                no_photo: '/img/no_photo.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w138_and_h175_face'\r\n            },\r\n            target: '/people/',\r\n            more_link: '/casts/',\r\n            type: type.view // вид списка (горизонтальный, вертикальный...)\r\n        }\r\n    }\r\n\r\n    if (type.context === 'movie crew') {\r\n        config = {\r\n            title: 'Съемочная группа',\r\n            text: {\r\n                name: 'name',\r\n                job: 'job'\r\n            },\r\n            img: {\r\n                property: 'profile_path',\r\n                no_photo: '/img/no_photo.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w138_and_h175_face'\r\n            },\r\n            target: '/people/',\r\n            more_link: '/crew/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n    if (type.context === 'people cast') {\r\n        config = {\r\n            title: 'Фильмы',\r\n            text: {\r\n                name: 'title',\r\n                job: 'character'\r\n            },\r\n            img: {\r\n                property: 'poster_path',\r\n                no_photo: '/img/no_poster.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w500'\r\n            },\r\n            target: '/movie-info/',\r\n            more_link: '/people-filmography/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    if (type.context === 'people crew') {\r\n        config = {\r\n            title: 'Принимал(а) участие',\r\n            text: {\r\n                name: 'title',\r\n                job: 'job'\r\n            },\r\n            img: {\r\n                property: 'poster_path',\r\n                no_photo: '/img/no_poster.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w500'\r\n            },\r\n            target: '/movie-info/',\r\n            more_link: '/people-crew/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>  {len > 0 &&\r\n            <>\r\n            <div className='credits_tittle bg-primary'>\r\n                <span className='text-white'>{config.title}:</span>\r\n            </div>\r\n            <div className={config.type + '_list_wrap border'}>\r\n                {data && data.map((item, index) => {\r\n                    if (!id) count = len;\r\n                    if (index < count) {\r\n                        return (\r\n\r\n                            <div key={index} className={config.type + '_list' + ' border'}>\r\n                                <div className={config.type + '_photo'}>\r\n                                    <NavLink to={config.target + item.id} className='link'>\r\n                                        <img className='border' src=\r\n                                            {item[config.img.property] ? config.img.path + item[config.img.property] : config.img.no_photo}\r\n                                            alt='профайл' />\r\n                                    </NavLink>\r\n                                </div>\r\n                                <div className='list_text'>\r\n                                    <div>\r\n                                        <NavLink to={config.target + item.id} className='link'>\r\n                                            {item[config.text.name] && item[config.text.name]}\r\n                                        </NavLink>\r\n                                    </div>\r\n                                    <div><i>{item[config.text.job] && item[config.text.job]}</i></div>\r\n                                    {type.context === 'people cast' || type.context === 'people crew'\r\n                                        ? <div><i>{mySetDate(item.release_date)}</i></div>\r\n                                        : ''\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    } else { return null }\r\n\r\n                })}\r\n                {(data && data.length > count) // Если id передан, покажем кнопку ЕЩЕ, если нет - это полный список\r\n                    ? id &&\r\n                    <div className={config.type + '_list border'}>\r\n                        <NavLink to={config.more_link + id} className='link'>\r\n                            Еще...\r\n                    </NavLink>\r\n                    </div>\r\n                    : ''\r\n                }\r\n                {data && data.length === 0 && 'Нет данных'}\r\n\r\n            </div>\r\n            </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default List;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withRouter, NavLink } from 'react-router-dom';\r\nimport { getCredits, getDetails } from '../../../redux/movie_reducer';\r\nimport './../../../styles/page_with_full_list.css';\r\nimport List from './../List';\r\n\r\n\r\n\r\n\r\nlet MovieCasts = ({ getCredits, getDetails, movie_info, credits, ...props }) => {\r\n    console.log(credits);\r\n\r\n    useEffect(() => {\r\n        const movie_id = props.match.params.movie_id;\r\n        getDetails(movie_id);\r\n        getCredits(movie_id);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className='realeases_header border'>\r\n                <div className='realeases_poster'>\r\n                    <NavLink to={`/movie-info/${props.match.params.movie_id}`} className='link'>\r\n                        <img src={movie_info.poster_path ? `https://image.tmdb.org/t/p/w220_and_h330_face${movie_info.poster_path}` : '/img/no_poster.jpg'} alt='постер' />\r\n                        Вернуться\r\n                    </NavLink>\r\n                </div>\r\n                <div className='realeases_text'>\r\n                    <h4>{movie_info.title}</h4>\r\n                </div>\r\n                <br />\r\n            </div>\r\n\r\n\r\n            {/* <List id={props.match.params.movie_id} data={credits.cast} type={{context: 'movie cast', view: 'horizontal'}} /> */}\r\n\r\n            <List id={null} data={credits.cast} type={{context: 'movie cast', view: 'vertical'}} />\r\n\r\n            {/* {credits.cast && credits.cast.map((item, index) => <MapToCredits key={item.id} item={item} config={{\r\n                title: 'Актеры',\r\n                text: {\r\n                    name: 'name',\r\n                    job: 'character'\r\n                },\r\n                img: {\r\n                    property: 'profile_path',\r\n                    no_photo: '/img/no_photo.jpg',\r\n                    path: 'https://image.tmdb.org/t/p/w138_and_h175_face'\r\n                },\r\n                target: '/people/',\r\n                link: '/casts/',\r\n                class: 'movie_casts_list'\r\n            }} />)} */}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movie_info: state.movies.movie_info,\r\n    credits: state.movies.credits\r\n})\r\n\r\n\r\nMovieCasts = compose(connect(mapStateToProps, {\r\n    getCredits,\r\n    getDetails\r\n}), withRouter)(MovieCasts);\r\n\r\nexport default MovieCasts;"],"sourceRoot":""}