{"version":3,"sources":["common/mySetDate.js","components/mainPage/List.js","components/mainPage/peopleInfo/PhotoModal.js","components/mainPage/peopleInfo/PeopleInfoHeader.js","components/mainPage/peopleInfo/PeopleInfoContainer.js"],"names":["mySetDate","d","locate","options","year","month","day","timezone","Date","toLocaleString","List","data","type","id","count","len","length","config","context","title","text","name","job","img","property","no_photo","path","target","more_link","view","className","map","item","index","key","to","src","alt","release_date","PhotoModal","people_image","show","setShow","images_isFetching","useState","current_photo","setCurrentPhoto","selectCurrentPhoto","value","new_current","Modal","onHide","dialogClassName","aria-labelledby","Header","closeButton","Title","Body","onClick","i","file_path","Spinner","animation","PeopleHeader","people","getImages","birthday","deathday","profile_path","place_of_birth","also_known_as","homepage","biography","PeopleContainer","compose","connect","state","people_isFetching","filmography","filmography_isFetching","getPeople","withRouter","props","console","log","useEffect","people_id","match","params","cast","crew"],"mappings":"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","file":"static/js/3.86fb2395.chunk.js","sourcesContent":["const mySetDate = (d, locate='ru') => {\r\n    const options = {\r\n        year: 'numeric',\r\n        month: 'numeric',\r\n        day: 'numeric',\r\n        // hour: 'numeric',\r\n        // minute: 'numeric',\r\n        // second: 'numeric',\r\n        timezone: 'UTC'\r\n    };\r\n    return d==='' ? null : new Date(d).toLocaleString(locate, options);\r\n}\r\n\r\n\r\nexport default mySetDate;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './../../styles/list.css';\r\nimport mySetDate from '../../common/mySetDate';\r\n\r\n\r\nconst List = ({ data, type, id }) => {\r\n\r\n\r\n    let count = 6;\r\n    const len = data ? data.length : 'нет данных';\r\n    let config = {};\r\n\r\n    if (type.context === 'movie cast') {\r\n        config = {\r\n            title: 'Актеры',\r\n            text: {\r\n                name: 'name',\r\n                job: 'character'\r\n            },\r\n            img: {\r\n                property: 'profile_path',\r\n                no_photo: '/img/no_photo.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w138_and_h175_face'\r\n            },\r\n            target: '/people/',\r\n            more_link: '/casts/',\r\n            type: type.view // вид списка (горизонтальный, вертикальный...)\r\n        }\r\n    }\r\n\r\n    if (type.context === 'movie crew') {\r\n        config = {\r\n            title: 'Съемочная группа',\r\n            text: {\r\n                name: 'name',\r\n                job: 'job'\r\n            },\r\n            img: {\r\n                property: 'profile_path',\r\n                no_photo: '/img/no_photo.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w138_and_h175_face'\r\n            },\r\n            target: '/people/',\r\n            more_link: '/crew/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n    if (type.context === 'people cast') {\r\n        config = {\r\n            title: 'Фильмы',\r\n            text: {\r\n                name: 'title',\r\n                job: 'character'\r\n            },\r\n            img: {\r\n                property: 'poster_path',\r\n                no_photo: '/img/no_poster.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w500'\r\n            },\r\n            target: '/movie-info/',\r\n            more_link: '/people-filmography/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    if (type.context === 'people crew') {\r\n        config = {\r\n            title: 'Принимал(а) участие',\r\n            text: {\r\n                name: 'title',\r\n                job: 'job'\r\n            },\r\n            img: {\r\n                property: 'poster_path',\r\n                no_photo: '/img/no_poster.jpg',\r\n                path: 'https://image.tmdb.org/t/p/w500'\r\n            },\r\n            target: '/movie-info/',\r\n            more_link: '/people-crew/',\r\n            type: type.view\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>  {len > 0 &&\r\n            <>\r\n            <div className='credits_tittle bg-primary'>\r\n                <span className='text-white'>{config.title}:</span>\r\n            </div>\r\n            <div className={config.type + '_list_wrap border'}>\r\n                {data && data.map((item, index) => {\r\n                    if (!id) count = len;\r\n                    if (index < count) {\r\n                        return (\r\n\r\n                            <div key={index} className={config.type + '_list' + ' border'}>\r\n                                <div className={config.type + '_photo'}>\r\n                                    <NavLink to={config.target + item.id} className='link'>\r\n                                        <img className='border' src=\r\n                                            {item[config.img.property] ? config.img.path + item[config.img.property] : config.img.no_photo}\r\n                                            alt='профайл' />\r\n                                    </NavLink>\r\n                                </div>\r\n                                <div className='list_text'>\r\n                                    <div>\r\n                                        <NavLink to={config.target + item.id} className='link'>\r\n                                            {item[config.text.name] && item[config.text.name]}\r\n                                        </NavLink>\r\n                                    </div>\r\n                                    <div><i>{item[config.text.job] && item[config.text.job]}</i></div>\r\n                                    {type.context === 'people cast' || type.context === 'people crew'\r\n                                        ? <div><i>{mySetDate(item.release_date)}</i></div>\r\n                                        : ''\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    } else { return null }\r\n\r\n                })}\r\n                {(data && data.length > count) // Если id передан, покажем кнопку ЕЩЕ, если нет - это полный список\r\n                    ? id &&\r\n                    <div className={config.type + '_list border'}>\r\n                        <NavLink to={config.more_link + id} className='link'>\r\n                            Еще...\r\n                    </NavLink>\r\n                    </div>\r\n                    : ''\r\n                }\r\n                {data && data.length === 0 && 'Нет данных'}\r\n\r\n            </div>\r\n            </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default List;","import React, { useState } from 'react';\r\nimport { Modal, Spinner } from 'react-bootstrap';\r\nimport './../../../styles/photos_modal.css'\r\n\r\n\r\n\r\nconst PhotoModal = ({ people_image, show, setShow, name, images_isFetching }) => {\r\n\r\n    const [current_photo, setCurrentPhoto] = useState(0);\r\n\r\n    const selectCurrentPhoto = (value) => {\r\n        let new_current = current_photo + value;\r\n        if (new_current > people_image.length - 1) new_current = 0;\r\n        if (new_current < 0) new_current = people_image.length - 1;\r\n        setCurrentPhoto(new_current);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            people_image={people_image}\r\n            show={show}\r\n            onHide={() => setShow(false)}\r\n            dialogClassName=\"modal-90w\"\r\n            aria-labelledby=\"people-custom-modal-styling-title\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"people-custom-modal-styling-title\">\r\n                    {name ? name : 'Фотографии'}\r\n                        &nbsp;\r\n                        {people_image.length > 0 && <>({current_photo + 1 + ' из '}{people_image.length})</>}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n                {images_isFetching ?\r\n                    <div className='people_photos_container'>\r\n\r\n                        {people_image.length > 0 &&\r\n                            <>\r\n                                <div className='arrow' onClick={() => selectCurrentPhoto(-1)}>&#60;</div>\r\n                                <div className='people_photos'>\r\n                                    {people_image.map((i, index) => {\r\n                                        if (index === current_photo) {\r\n                                            return (\r\n                                                \r\n                                                <img key={index} src={`https://image.tmdb.org/t/p/w500${i.file_path}`} alt='Фото' />\r\n\r\n                                            )\r\n                                        }\r\n                                    })}\r\n                                </div>\r\n                                <div className='arrow' onClick={() => selectCurrentPhoto(1)}>&#62;</div>\r\n                            </>\r\n                        }\r\n                        {people_image.length <= 0 &&\r\n                            <img src='/img/no_photo.jpg' alt='Фото' />\r\n                        }\r\n                    </div>\r\n                    // || <img src='/img/no_photo.jpg' alt='Фото' />\r\n                    : <Spinner animation='border' />\r\n                }\r\n\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PhotoModal;","import React, { useState } from 'react';\r\nimport mySetDate from '../../../common/mySetDate';\r\nimport PhotoModal from './PhotoModal';\r\nimport './../../../styles/info_pages.css';\r\n\r\n\r\nconst PeopleHeader = ({ people, getImages, people_image, images_isFetching }) => {\r\n\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const birthday = people.birthday ? mySetDate(people.birthday) : 'нет данных';\r\n    const deathday = people.deathday ? mySetDate(people.deathday) : '';\r\n\r\n    return (\r\n        <div className='details_header border'>\r\n            <PhotoModal\r\n                people_image={people_image}\r\n                show={show}\r\n                setShow={setShow}\r\n                name={people.name}\r\n                images_isFetching={images_isFetching}\r\n            />\r\n            <div className='poster' onClick={() => {\r\n                getImages(people.id);\r\n                setShow(true);\r\n            }}>\r\n                <img src={people.profile_path ? `https://image.tmdb.org/t/p/w220_and_h330_face${people.profile_path}` : '/img/no_photo.jpg'} alt='постер' />\r\n                <div className='loupe'>\r\n                    {/* лупа */}\r\n                    {/* &#128269; */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className='text'>\r\n                <h4>{people.name ? people.name : 'Данные отсутствуют'}</h4>\r\n                <hr />\r\n                <p>Дата рождения: {birthday}</p>\r\n                {deathday && <p> Дата смерти: {deathday}</p>}\r\n                <p>Место рождения: {people.place_of_birth ? people.place_of_birth : 'нет данных'}</p>\r\n                <p>Так же известен(на), как: {people.also_known_as.map(i => i + ', ') || 'нет данных'}</p>\r\n\r\n                <p>Домашняя страница: {people.homepage ? people.homepage : 'нет данных'}</p>\r\n                {people.biography\r\n                    ? <>\r\n                        <details>\r\n                            <summary>Биография:</summary>\r\n                            <p>{people.biography}</p>\r\n                        </details>\r\n                    </>\r\n                    : 'нет данных о биографии'}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PeopleHeader;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getPeople, getImages } from '../../../redux/people_reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport PeopleHeader from './PeopleInfoHeader';\r\nimport List from './../List';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst People = ({ getPeople, people_isFetching, people, filmography, filmography_isFetching, getImages, images_isFetching, people_image, ...props }) => {\r\n\r\n\r\n     console.log('people_image', people_image);\r\n\r\n\r\n    useEffect(() => {\r\n        const people_id = props.match.params.people_id;\r\n        getPeople(people_id);\r\n    }, [])\r\n\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {!people_isFetching && <Spinner animation='border' />}      \r\n\r\n            \r\n                {people_isFetching &&\r\n                   <PeopleHeader\r\n                   people={people}\r\n                   getImages={getImages}\r\n                   people_image={people_image}\r\n                   images_isFetching={images_isFetching}\r\n                   />\r\n                }\r\n                \r\n\r\n\r\n                <List id={props.match.params.people_id} data={filmography.cast} type={{context: 'people cast', view: 'horizontal'}} />\r\n                <List id={props.match.params.people_id} data={filmography.crew} type={{context: 'people crew', view: 'horizontal'}} />\r\n            \r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst getStateToProps = (state) => (\r\n    {\r\n        people: state.people.people,\r\n        people_isFetching: state.people.people_isFetching,\r\n        filmography: state.people.filmography,\r\n        filmography_isFetching: state.people.filmography_isFetching,\r\n        people_image: state.people.people_image,\r\n        images_isFetching: state.people.images_isFetching\r\n    }\r\n)\r\n\r\n\r\nconst PeopleContainer = compose(connect(getStateToProps,\r\n    { getPeople, getImages }), withRouter)(People);\r\n\r\nexport default PeopleContainer;"],"sourceRoot":""}